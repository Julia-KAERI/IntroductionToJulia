---
title: "반복자 인터페이스"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---

반복자(Iterator) 는 컨테이너 타입으로 포함하는 성분을 처음부터 끝까지 하나 하나 접근 할 수 있는 자료구조를 말하며, Julia 에서 제공하는 컨테이너 타입은 대부분 iterator 입니다. 배열이나 튜플과 같이 순서가 정해져 있을 수도 있고 사전과 같이 순서가 임의적일 수는 있지만 어쨌든 하나하나 접근 할 수 있어야 합니다. 다음과 같은 자료형은 정의상 4개의 값을 저장할 수 있는 컨테이너이지만 반복자는 아닙니다.

```julia
struct NonIterator
    first
    second
    third
    final
end
```

Julia 에서 어떤 타입이 반복자라는 것은 그 타입에 대해 아래의 메서드가 정의되어 있다는 것을 말합니다. Julia 언어에서 iteroator 의 state는 iterator가 현재 얼마나 진행되었는지 또는 어디에 있는지를 나타내는 내부적으로 사용하는 정보를 말하며 반복 과정에서 상태를 유지하거나 업데이트하는 데 사용됩니다. 이 `state` 에 대한 정보를 유지하고 있는 객체를 `stateful` 이라고 합니다.

</br>


| 메서드 | 설명 |
|:-----:|:----------------|
| `iterate(iter)` |	컨테이너의 첫번째 아이템과 상태를 튜플로 반환합니다. 빈 컨테이너의 경우는 `nothing` 을 반환합니다. |
| `iterate(iter, state)` | `state` 에 의해 지정되는 아이템의 다음 아이템과 그 `state` 를 튜플로 반환합니다. 마지막 값일 경우는 `nothing` 을 반환합니다. |

</br>

반복자에 대해 추가로 정의 할 수 있는 메서드에는 다음과 같은 것이 있습니다. 

| 메서드 | 기본 정의 | 설명 |
|:--------:|:---------:|:-------------------|
| `Base.IteratorSize(IterType)` | `Base.HasLength()` | 길이를 가지면 `Base.HasLength()`, 차원을 가지면 `N` 차원에 대해 `Base.HasShape{N}()`, 무한개의 사이즈이면 `Base.IsInfinite()`, 크기를 특정할 수 없으면 `Base.SizeUnknown()` 을 반환합니다. |
| `length(iter)` |  | 아이템 갯수를 알 수 있다면 그것을 반환합니다. |
| `size(iter, [dim])` | (undefined) | 차원(`[dim]`) 이 지정됬다면 각 차원에서의 아이템 개수. 아니면 차원까지 포함한 개수 |
| `Base.IteratorEltype(IterType)` | `Base.HasEltype()` | `eltype(Itertype)` 이 존재하면 `Base.EltypeUnknown()`, 아니면 `Base.HasEltype()` 을 반환합니다.|
| `eltype(IterType)` | Any | `iterate()` 에 의해 반환되는 첫번째 성분의 타입을 반환합니다. |
| `length(iter)` | (undefined) | 아이템 갯수 |
| `Base.isdone(iter, [state])` |  | iterator 가 끝났는지 알아보는 지름길같은 함수이이다. 끝나지 않았으면 `missing` 을 반환합니다. |

</br>


```julia
a=Dict("a"=>1, "c"=>3, "e"=>9)
next = iterate(a)
println(next)
while next !== nothing
    (item, state) = next
    # body
    next = iterate(a, state)
    println(next)
end
```
```txt
("c" => 3, 5)
("e" => 9, 6)
("a" => 1, 15)
nothing
```




</br>

## 인덱스로 접근가능한 반복자 

이제 유용한 반복자를 하나 만들어 봅시다. 신호처리에서 많이 사용하는 베열가운데 로그스케일로 변화하는 배열이 있습니다. matlab 에서의 `logspace` 함수, python 에서의 `numpy.logspace` 함수로 `logspace(a, b, n, base=10)` 는  `base` 의 `a` 승부터 `base` 의 `b` 승까지 로그스케일로 변하는 배열입니다. Julia 에서는 `base .^ range(a,b,n)` 과 그 결과가 같습니다.(정확히 말하면 끝값을 포함 하느냐 하지 않느냐에 따라 다릅니다. Matlab 과 julia 는 포함하며 python 은 포함하지 않습니다.)

이 반복자를 `LogSpacingRange` 라고 합시다. 우리의 목표는 `logspace` 함수로 `LogSpacingRange` 객체 생성시켜 배열처럼 사용 할 수 있게 하는 것입니다. 배열이나 튜플처럼 인덱스로 접근 가능한 객체를 만들기 위해서는 위해서는 다음의 네가지 메서드를 정의해 줘야 합니다.

| 메서드 | 설명 |
|:-----:|:---------------|
| `getindex(X, i)` | `X[i]`, 인덱스를 이용한 접근 |
| `setindex!(X, v, i)` | `X[i] = v`, 인덱스를 이용한 할당 |
| `firstindex(X)` | `X[begin]` 로 접근 가능한 첫번째 성분 |
| `lastindex(X)` | `X[end]` 로 접근 가능한 마지막 성분 |

`LogSpacingRange` 객체는 immutable 인 것이 좋을 것 같습니다. 이 경우 `LogSpacingRange` 타입에 대한 `setindex` 메서드를 작성하지 않으면 됩니다. 나머지 함수에 대해서는 적절하게 만들어 줍니다. 전체 코드는 다음과 같습니다.


```julia
struct LogSpacingRange{T}
    start::T
    stop::T
    base::T
    size::Int64

    function LogSpacingRange(start::Real, stop::Real, size::Int64, base::Real)
        @assert base > 1
        @assert size ≥ 1
        ftype = promote_type(typeof(start), typeof(stop))
        if ~(ftype <: AbstractFloat)
            ftype = Float64
        end

        return new{ftype}(start, stop, base, size)
    end
end

Base.size(p::LogSpacingRange) = (p.size, )
Base.length(p::LogSpacingRange) = p.size
Base.iterate(p::LogSpacingRange, state=1) = state > p.size ? nothing : (p[state], state+1)
Base.eltype(p::LogSpacingRange{T}) where {T} = T
Base.IteratorSize(::LogSpacingRange{T}) where {T} = Base.HasLength()
Base.IteratorEltype(::LogSpacingRange{T}) where {T} = Base.HasEltype()

function Base.getindex(p::LogSpacingRange, i::Int64) 
    @assert 0 < i ≤ p.size
    if p.size == 1
        return p.start
    else 
        r = p.start + (p.stop-p.start)/(p.size-1)*(i-1)
        return (p.base)^r
    end
end

function logspace(a, b, n::Integer=10, base::Real=10)
    return LogSpacingRange(a, b, n, base)
end
```

</br>

`logspace(a, b, n=10, base=10)` 함수를 통해 `LogSpacingRange` 타입의 반복자를 생성 할 수 있습니다. 

```julia
for v in logspace(1, 5, 3, 10)
    @show v
end 
```

를 통해 다음과 같은 결과를 얻습니다. 

```txt
v = 10.0
v = 1000.0
v = 100000.0
```

또한 `getindex` 함수를 정의하여 배열처럼 사용 할 수 있습니다. 

```txt
In [6]: a=logspace(1, 10, 10)
Out[6]: NAJ.LogSpacingRange{Float64}(1.0, 10.0, 10.0, 10)

In [7]: a[3]
Out[7]: 1000.0
``` 

물론 `10.0.^range(1, 5, length=3)` 이 같은 기능을 하는 배열을 만들어 줍니다. `LogSpacingRange` 의 장점은 숫자 세개만으로 큰 크기의 배열의 기능을 수행 할 수 있다는 것입니다. 물론 `collect()` 함수를 통해 배열로 변경하는 경우 그 장점은 사라지지만 말입니다.


</br>

## 배열처럼 동작하는 반복자

앞서의 `LogSpacingRange` 는 1차원 배열, 혹은 튜플처럼 동작했습니다. 그렇다면 배열, 특히 다차원 배열과 같이 동작하기 위해서는 다음의 메서드가 반드시 정의되어야 합니다.

| 메서드 | 설명  |
|:-----------:|:------------------|
| `size(A)` | `A` 의 차원 튜플 |
| `getindex(A, i::Int)` | 선형 인덱스로의 접근 |
| `getindex(A, I::Vararg{Int, N})` | 데카르트 인덱스로의 접근 |

하지만 이것으로는 배열의 기능 가운데 크기를 얻는 것과 인덱스를 통해 값을 얻는 것만 가능합니다. 배열처럼 인덱스를 통해 접근해서 값을 변경하고, 유사한 배열을 만드는 등의 기능을 넣기 위해서는 Julia 공식 문서의 [Abstract Arrays](https://docs.julialang.org/en/v1/manual/interfaces/#man-interface-array) 에 나오는 기능을 추가해야 합니다. 또한 Broadcasting 과 관련된 여러가지 연산을 지원하기 위해서는 [Customizing broadcasting](https://docs.julialang.org/en/v1/manual/interfaces/#man-interfaces-broadcasting) 의 메서드도 정의해 줘야 합니다.

개인적인 필요에 의해 2차원 배열처럼 작동하는 어떤 데이터 타입이 필요해서 작성해 보았습니다.

```julia
struct ImageData{T} <: AbstractArray{T, 2}
    mat::Matrix{T}
    
    function ImageData(mat::Matrix{T}) where T<:Real
        return new{T}(mat)
    end
end

Matrix{T}(idt::ImageData) where T= Matrix{T}(idt.mat)

Base.eltype(idt::ImageData) = Base.eltype(idt.mat)
Base.length(idt::ImageData) = Base.length(idt.mat)
Base.iterate(idt::ImageData) = Base.iterate(idt.mat)
Base.iterate(idt::ImageData, state...) = Base.iterate(idt.mat, state...)
Base.isdone(idt::ImageData; state...) = Base.isdone(idt.mat; state...)
Base.size(idt::ImageData{T}, x2...) where T = Base.size(idt.mat, x2...)


function Base.show(io::IO, idt::ImageData{T}) where T
    h, w = size(idt.mat)
    println(io, "$h","x","$w ImageData{$T}")
end

Base.getindex(idt::ImageData{T}, idx...) where T= Base.getindex(idt.mat, idx...)
Base.getindex(idt::ImageData{T}, inds::Vararg{Int,N}) where {T,N} = idt.mat[inds...]

Base.setindex!(idt::ImageData{T}, idx...) where T = Base.setindex!(idt.mat, idx...)
Base.setindex!(idt::ImageData{T}, val, inds::Vararg{Int, 2}) where T = A.data[inds...] = val

Base.showarg(io::IO, idt::ImageData, toplevel) = print(io, typeof(idt))

Base.firstindex(idt::ImageData{T}) where T = Base.firstindex(idt.mat)
Base.lastindex(idt::ImageData{T}) where T = Base.lastindex(idt.mat)

Base.BroadcastStyle(::Type{ImageData}) = ImageData()

Base.axes(idt::ImageData{T}) where T = Base.axes(idt.mat)

# Start of broadcast part to maintain shape after operation
Base.BroadcastStyle(::Type{<:ImageData}) = Broadcast.ArrayStyle{ImageData}()

function Base.similar(bc::Broadcast.Broadcasted{Broadcast.ArrayStyle{ImageData}}, ::Type{ElType}) where ElType
    # Scan the inputs for the ArrayAndChar:
    A = find_aac(bc)
    # Use the char field of A to create the output
    ImageData(similar(Array{ElType}, axes(bc)))
end

"`A = find_aac(As)` returns the first ArrayAndChar among the arguments."
find_aac(bc::Base.Broadcast.Broadcasted) = find_aac(bc.args)
find_aac(args::Tuple) = find_aac(find_aac(args[1]), Base.tail(args))
find_aac(x) = x
find_aac(::Tuple{}) = nothing
find_aac(a::ImageData, rest) = a
find_aac(::Any, rest) = find_aac(rest)
```

</br>

아래 부분의 `BroadCast` 관련 부분이 없다면 도트 연산자 계산이 되지 않으며, 많은 경우 연산 이후 1차원 배열로 바뀌게 됩니다. 각자의 필요에 맞게 구현할 부분은 구현하고 뺄 부분은 빼면 됩니다.

</br>

```julia
A = reshape(collect(1.0:12), (3, 4))
M = ImageData(A)
```
```txt
3×4 ImageData{Float64}:
 1.0  4.0  7.0  10.0
 2.0  5.0  8.0  11.0
 3.0  6.0  9.0  12.0
```

</br>

```julia
sin.(M)
```
```txt
3×4 ImageData{Float64}:
 0.841471  -0.756802  0.656987  -0.544021
 0.909297  -0.958924  0.989358  -0.99999
 0.14112   -0.279415  0.412118  -0.536573
```

</br>

구



