---
title: "문자열 리터럴"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---

## 리터럴

### 리터럴

우선 **리터럴 (literal)** 이란 용어에 대해 알아봅시다. 

```julia
v = 1
```

위의 코드는 변수 `v` 에 `Int64` 타입의 `1` 을 할당하는 것입니다. 이 때 `v` 는 변수이며, 등호 오른쪽의 `1` 은 코드상 `Int64` 타입의 정수 `1` 을 의미하며 이 `Int64` 타입의 `1` 을 리터럴 이라고 합니다. 즉 실제로 변수에 할당되는 값을 표현하는 코드입니다. 

</br>

```julia
c1 = 'a'
s1 = "abc"
```

작은따옴표 `''` 안의 하나의 문자는 `Char` 타입의 값이며 겹따옴표 `""` 안의 문자열은 `String` 타입의 값입니다. 즉 `Char` 타입과 `String` 타입을 표현하기 위해 홑따옴표와 겹따옴표가 리터럴에 사용되었습니다.

</br>

### 자연수의 16진수 표현

```julia
v = 11
```

을 봅시다. 당연히 십진수로 생각하겠지만 이것을 이진수로 생각하면 십진수 `3` 이며 16진수로 생각하면 십진수 `17` 입니다. 16 진수 값을 할당할 때는 앞에 `0x` 를 붙입니다.

```txt
In [1]: h=0xf42
Out[1]: 0x0f42

In [2]: Int(h)
Out[2]: 3906
```

16진수 `f42` 는 10 진수 `3906` 과 같습니다. Julia 는 의외로 10 진수 리터럴을 16 진수 리터럴로 바꾸는 단순한 함수를 제공하지 않습니다. (Python 에는 `hex` 함수가 있는데....) 다만 다음과 같은 방법을 사용 할 수 있습니다.

```txt
In [1]: hex(h) = "0x"*string(h, base=16)
Out[1]: hex (generic function with 1 method)

In [2]: hex(33)
Out[2]: "0x21"
```

</br>

## 비표준 문자열 리터럴

Julia 에서는 `r"\((.*)\)"` 이나 `raw"\\ \\\""` 와 같이 겹따옴표 앞에 `r` 이나 `raw` 와 같은 특별한 구문이 오는 경우가 있습니다. 이런 것들을 비표준 문자열 리터럴이라고 하며 많이 사용됩니다. 보통 이런 리터럴은 객체의 생성자로 사용됩니다.

</br>

### `r` 로 시작되는 비표준 문자열 리터럴 : 정규표현식

`r` 로 시작되는 비표준 문자열 리터럴은 정규표현식 객체를 생성하는 생성자입니다. 여기서 정규표현식에 대해 자세히 다루지는 않겠습니다. 예를 들어 다음을 봅시다.

```txt
In [4]: re = r"^\s*(?:#|$)"
Out[4]: r"^\s*(?:#|$)"

In [5]: typeof(re)
Out[5]: Regex

In [6]: occursin(re, "# a comment")
Out[6]: true
```

`re = r"^\s*(?:#|$)"` 는 정규표현식 객체 `re` 를 생성합니다. 

</br>

### `b` 로 시작되는 비표준 문자열 리터럴 : 바이트 배열

```txt
In [13]: barr = b"123456\xff\u2200"
Out[13]: 10-element Base.CodeUnits{UInt8, String}:
 0x31
 0x32
 0x33
 0x34
 0x35
 0x36
 0xff
 0xe2
 0x88
 0x80

In [14]: barr[1]
Out[14]: 0x31
```

`b"..."` 리터럴은 바이트 배열을 생성하며 배열이므로 인덱스로 접근 할 수 있습니다. 문자 `1` 은 ASCII 의 49 번에 할딩되었으므로 49 의 16진수 표현인 `0x31` 를 값으로 가집니다. `\xff` 는 16진수 `ff` 인 정수 255 를 의미합니다. `\u2200` 은 3바이트를 차지하는 유니코드 표현으로 226, 136, 128 로 표현됩니다.

</br>

### `v` 로 시작되는 비표준 문자열 리터럴 : 버젼 넘버

프로그램이나 패키지 등의 버젼은 보통 major, minor, patch 의 세가지 숫자로 `2.3.6` 과 같이 표기합니다. 이 때 `2` 는 major, `3` 은 minor, `6` 은 patch 버젼입니다. 

```txt
In [18]: v1 = v"2.3.4"
Out[18]: v"2.3.4"

In [19]: v2 = v"2.5.7"
Out[19]: v"2.5.7"

In [20]: v1<v2
Out[20]: true
```

`2.5.7` 버젼은 `2.3.4` 버젼보다 이후 버젼이므로 `v1 < v2` 는 참입니다. 


</br>

### `raw` 로 시작되는 비표준 문자열 리터럴 : Raw string

`\n` 과 같이 `\` 로 시작하여 하나의 문자가 붙는 문자열은 표준 문자열에서 탈출 문자(escape character) 라고 하여 문자 이외의 어떤 기능을 의미합니다. 예를 들어 `\u` 는 유니코드에 대한 접두어이며 `\n` 은 줄바꿈을 의미하죠. 그러나 `raw` 로 시작하는 문자열 리터럴에서는 이런 것들이 모두 무시됩니다. 또한 `$` 를 사용하는 문자열 보간도 무시됩니다.

```txt
In [1]: s="abc"
Out[1]: "abc"

In [2]: "123$s"
Out[2]: "123abc"

In [3]: raw"123$s"
Out[3]: "123\$s"
```

</br>

## 비표준 문자열 리터럴의 작성

위에서 보았듯이 비표준 문자열 리터럴은 특정한 객체를 생성하는 생성자로 사용됩니다. 이런 비표준 문자열 리터럴에 대한 규칙은 매크로를 이용하여 만들 수 있습니다. 예를 들어 어떤 문자열이 수와 문자가 공백으로 구분되어 있으며, 이중 정수형 만을 골라내어 배열로 만들고자 한다고 합시다. 즉 `"1 23 a 3.3 5"` 의 문자열에서 정수만을 뽑아내어 배열 `[1, 23, 5]` 를 생성하는 일을 비표준 문자열 리터럴로 해 봅시다. 

비표준 문자열 리터럴은 구분자 와 `_str` 을 합친 이름의 매크로를 작성하면 됩니다. 즉 앞의 문자열을 `A"1 23 a 3.3 5"` 로 사용하고자 한다면 `A_str` 라는 이름을 갖도록 매크로를 작성합니다. 버젼 넘버 리터럴은 `v_str` 매크로를 통해 구현었으며 Raw string 리터럴은 `raw_str` 매크로를 통해 구현되었습니다. 우리가 앞서 언급했던 것을 매크로로 구현해 봅시다.

```julia
macro A_str(s)
    split(s)
    filter!(!isnothing,[if tryparse(Int64, a) != nothing parse(Int64, a) else nothing end for a in split(s)])
end
```

여기에

```julia
p = A"1 23 a 3.3 5"
```

를 실행시키면 원하는 정수 배열을 얻을 수 있습니다. `isnothing`, `tryparse`, `parse` 함수는 직접 알아보기 바랍니다. 배열 생성에 array comprehension 과 내부의 `if ... else ... end` 구문을 사용하는 것은 [Array comprehension 을 이용한 배열의 생성](../introduction_to_julia/06_arrays.qmd#sec-array_comprehension) 를 참고하십시요.


만약 "A 3 2 12" 와 같은 문자열이 주어졌다면 다음을 통해 `A"..."` 리터럴로 바꾸고, 자연스럽게 배열을 만들 수 있습니다.

```julia
s = "A 3 2 12"
eval(Meta.parse("A\"$s\""))
```

혹은

```julia
s2="A\"" * s * "\""
eval(Meta.parse(s2))
```

와 같이 할 수 있습니다.

</br>












