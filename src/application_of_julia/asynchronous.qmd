---
title: "비동기 프로그래밍"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---

::: {.callout-caution appearance="simple"}

프로그램이 수행하는 일로서의 작업과 비동기 프로그래밍의 개념으로서의 작업(Task) 를 구분하기 위해 후자를 항상 `Task` 로 표기하며 전자는 한글로 작업 이라고 표기합니다.

:::

프로그램이 외부 세계와 상호 작용해야 할 때(예: 인터넷을 통해 다른 컴퓨터와 통신) 프로그램의 작업이 예측할 수 없는 순서로 진행되어야 할 수 있습니다. 프로그램에서 파일을 다운로드해야 한다고 가정해 보겠습니다. 다운로드 작업을 시작하고 완료될 때까지 다른 작업을 수행한 다음 다운로드된 파일이 필요한 코드를 사용할 수 있게 되면 다시 시작하고 싶습니다. 이런 종류의 시나리오는 비동기 프로그래밍의 영역에 속하며, 때로는 동시 프로그래밍이라고도 합니다(개념적으로 여러 가지가 동시에 발생하기 때문입니다).

이러한 시나리오를 해결하기 위해 Julia는 `Task` 라는 기능을 제공합니다. 이 Task 는 대칭 코루틴(symmetric coroutines), 경량 스레드(lightweight threads), 협력적 멀티태스킹(cooperative multitasking) 또는 원샷 연속(one-shot continuations)과 같은 다른 여러 이름으로 불리기도 합니다. 어떤 실제의 컴퓨팅 작업(특정 함수 실행)이 `Task` 로 지정되면 다른 작업으로 전환하여 작업을 중단할 수 있습니다. 원래 작업은 나중에 다시 시작할 수 있으며, 이때 중단된 지점에서 바로 시작합니다. 처음에는 함수 호출과 유사해 보일 수 있습니다. 그러나 두 가지 주요 차이점이 있습니다. 

1. 작업 전환은 공간을 사용하지 않으므로 호출 스택을 소모하지 않고도 아무리 많은 작업 전환이 발생할 수 있습니다.
2. 호출된 함수가 제어권을 호출 함수로 반환하기 전에 실행을 완료해야 하는 함수 호출과 달리 작업 간 전환은 어떤 순서로든 발생할 수 있습니다.

</br>

## `Task` 의 기본 기능

`Task` 는 인자가 없는 함수 `f` 에 대해 `Task(f)` 와 같이 호출하거나 앞에 `@task` 매크로를 사용하여 생성합니다. 수행하면 5초를 기다렸다가(`sleep(5)`) 이후 `done` 을 출력하는 작업을 `Task` 로 생성해 봅시다. 아래의 두 코드는 동일한 기능을 합니다.

```txt
In [5]: t = @task begin; sleep(5); println("done"); end
Out[5]: Task (runnable) @0x000000010e231120
```

```txt
In [6]: f() = begin sleep(5);println("done") end
Out[6]: f (generic function with 1 method)

In [7]: t = Task(f)
Out[7]: Task (runnable) @0x000000010db386a0
```

여기까지는 준비가 되었을 뿐 실행을 시작하지 않은 상태이며. `schedule` 함수를 통해 실행 할 수 있습니다. Julia REPL 에서 다음과 같이 수행해 봅시다.

```txt
In [10]: schedule(t)
Out[10]: Task (runnable) @0x000000010db386a0
```

5초 후 REPL 에 아래와 같은 메시지가 찍힙니다.

```txt
In [11]: done
In [11]:
```

`Task` 인 `t` 에 대해 `wait(t)` 는  `t` 가 종료될 때까지 기다리게 합니다. 

```txt
In [15]: t = @task begin; sleep(5); println("done"); end
Out[15]: Task (runnable) @0x000000010e231120

In [16]: schedule(t1);wait(t1)
done1
```

단순히 `schedule(t)` 만 했을 때는 즉각 REPL 로 제어권이 넘어오지만, 즉 새로운 입력 프롬프트가 보이지만 `schedule(t);wait(t)` 했을 때는 `Task` `t` 가 끝난 후에야 REPL 의 새로운 입력 프롬프트가 보입니다. 


앞으로 많이 사용하게 될 `@asynk x` 매크로는 `schedule(@task x)` 와 같습니다.

</br>

## 채널(Channel) 과의 통신

Julia 에서 `Channel` 은 여러 `Task` 가 읽고 쓸 수 있는 대기 가능한 선입 선출(first-in first-out) 큐(Que) 입니다. 큐는 컨테이너로 `put!` 함수를 통해 추가하고 `take!` 함수를 통해 컨테이너의 성분을 반환받으며 컨테이너에서 제거합니다. 먼저 `put!` 한 순서대로 `take!` 됩니다.

```txt
In [1]: function producer(c::Channel)
                   put!(c, "start")
                   for n=1:4
                       put!(c, 2n)
                   end
                   put!(c, "stop")
               end;

In [2]: chnl = Channel(producer);

In [3]: take!(chnl)
Out[3]: "start"

In [4]: take!(chnl)
Out[4]: 2

In [4]: take!(chnl)
Out[4]: 4

In [4]: take!(chnl)
Out[4]: 6

In [4]: take!(chnl)
Out[4]: 8

In [4]: take!(chnl)
Out[4]: "stop"

In [4]: take!(chnl)
ERROR: InvalidStateException: Channel is closed.
```

`In [1]` 에서 `Channel` 을 인자로 받는 함수 `procedure` 를 정의했습니다. `In [2]` 에서 `Channel` 객체를 `procedure` 함수를 통해 생성시켰습니다. `"start"`, `2`, `4`, `6`, `8` `"end"` 순서로 입력되었으므로 `take!(chnl)` 로 빼낼때 역시 같은 순서로 나옵니다. 그리고 마지막의 원소가 빠져 빈 큐가 된 상태에서 `take!` 를 수행하면 에러가 발생합니다.

`Channel` 은 반복자이므로 `for` 루프에 사용 할 수 있습니다.

```txt
In [11]: chnl = Channel(producer);

In [12]: [x for x in chnl]
Out[12]: 6-element Vector{Any}:
  "start"
 2
 4
 6
 8
  "stop"
```












