---
title: "환경과 패키지 개발"
number-sections: true
number-depth: 3
crossref:
  chapters: false
---

</br>

## 환경

여기서는 `Pkg.jl` 을 통해 프로젝트와 환경을 관리하는 것을 빠르게 알아보자. `Pkg.jl` 자체에 대해서는 [`Pkg.jl` 공식 매뉴얼](https://pkgdocs.julialang.org/v1/) 이나 [`Pkg.jl` 한글 번역](../application_of_julia/pkg.qmd) 을 참고한다. 여기서는 `Pkg.jl` 의 기능중 프로젝트 관리 혹은 가상 환경에 관련된 것만 주로 다룬다. 우선 **환경(environment)** 에 대해 알아보자.

환경이란 julia 에서 제공하는 별도의 실행 공간이라고 생각할 수 있다. 각 환경은 julia 인터프리터와 기본 설치되는 패키지만을 공유한다. 각 환경마다 별도의 패키지를 설치 할 수 있으며 자유롭게 환경을 변경 시킬 수 있다. 그러나 두개 이상의 환경을 동시에 사용하지는 못한다. Julia 를 설치하게 되면 julia 의 버젼으로 표시되는 기본 환경만 사용 할 수 있다. `julia REPL` 에서 `]` 를 치면 

```{.julia filename="REPL"}
(@v1.11) pkg>
```

와 같이 나타난다. 설치된 julia 의 버젼이 `@1.11` 과 같이 나타난다면 기본 환경이라는 것을 의미한다.

보통은 패키지를 개발 할 때 새로운 환경을 설치하지만 꼭 그렇지 않더라도 별도의 환경을 분리하면 유용할 경우가 있다. 개인적으로 julia 를 주로사용 하는 경우는 패키지 개발을 제외하고 (1) 간단하고 짧게 코딩할 경우, (2) 수치해석에 관련된 일을 할 경우, (3) 이미지 처리에 관련된 일을 할 경우 가 있다. (1) 의 경우 plotting 용 `CairoMakie.jl` 나 코드 수행시간 검사를 위한 `BenchmarkTools.jl` 을 제외하고는 다른 패키지는 별로 사용하지 않으며, (2) 나 (3) 의 겨우 겹치는 것도 있지만 겹치지 않는 것이 더 많다. 이 경우 각각 환경을 분리시켜 놓으면 여러 모로 편하다. 

이 때 환경을 분리시키는 것은 패키지 개발과는 관계 없이 개인적 편의성 때문이며, 새로운 환경을 만드는 것은 다음과 같이 한다.

</br>

### 기본 환경 {#sec-part3_main_environment}

기본 환경은 나의 경우 julia 1.11 을 사용하는데 홈 디렉토리 밑의 `.julia/environments/v1.11` 디렉토리에 존재한다. Julia 와 같이 설치되는 표준 라이브러리와 기본환경에 설치되는 패키지들은 새로운 환경에서도 `using` 과 `import` 를 통해 사용 할 수 있다.

</br>

### 새로운 환경 만들기 {#sec-part3_pkg_new_environment} 

`juliaNumerical` 이라는 환경을 만든다고 하자. 환경을 위해서는 별도의 디렉토리(폴더)가 필요하다. 나 같은 경우는 홈 폴더(Mac 의 경우 `/Users/julian/`, Linux 의 경우 `/home/julian/`) 의 하위디렉토리에 `.juliaenv` 폴더를 만들었다. 그리고 julia REPL 을 실행시키고 다음 명령어로 폴더에 제대로 들어왔는지 확인한다.

```{.julia filename="REPL-In"}
pwd()
```

원하는 결과, 예를 들면 `/Users/julian/.juliaenv` 가 출력되면 성공이다.  이제 `]` 키를 통해 pkg 모드로 들어선다. 

```{.julia filename="RELP-In"}
(@v1.10) pkg>
```


이제 환경을 초기화 한다. 수치 해석을 주로 다룰 환경이기 때문에 환경 이름을 `Numerical` 이라고 하자. 헌재 디렉토리 아레에 `Numerical` 이라는 디렉토리를 만들고 환경에 필요한 `Project.toml` 파일을 생성한다.

```{.txt filename="REPL-In"}
(@v1.10) pkg> activate Numerical
  Generating  project Numerical:
    Numerical/Project.toml
```

`Numerical` 디렉토리가 생겼고 그 디렉토리 밑에 `Project.toml` 파일이 생겼다. `Project.toml` 파일은 환경의 정보와 설정을 담는 파일이며 여기에 패키지를 추가하면 `Manifest.toml` 파일이 생긴다. REPL 에서 아래와 같이 `LOAD_PATH` 의 julia 환경변수를 읽어보자. 

```{.txt filename="REPL-IN"}
In [1]: LOAD_PATH
Out[1]: 3-element Vector{String}:
 "@"
 "@v#.#"
 "@stdlib"
```

`LOAD_PATH` 는 `using` 과 `import` 를 사용하여 읽을 수 있는 패키지의 경로 정보를 담는다. 여기서 `@` 는 현재 환경, `@v#.#` 은 앞서 언급한 [기본환경](#sec-part3_main_environment), 그리고 `@stdlib` 는 표준 라이브러리를 의미한다. 즉 기본 환경에 설치한 패키지는 기본 환경이 아닌 패키지에서 불러 올 수 있지만, 현재 환경에서 설치되었지만 기본환경에 설치되어 있지 않은 패키지는 기본환경에서 불러 올 수 없으며, 명시적으로 설치되지 않은 다른 기본환경이 아닌 환경에서도 불러 올 수 없다.

</br>

julia REPL 을 어떤 환경에서 실행시키고 싶다면 그리고 그 환경이 `~/.juliaenv/juliaImage` 디렉토리에 위치한다면

```sh
julia --project=~/.juliaenv/juliaImage
```

와 같이 실행시키면 된다. Mac 이나 Linux 같은 OS 에서는 .bashrc 나 .zshrc 에 다음과 같이 `alias` 를 지정해 주면 쉽게 사용 할 수 있다.

```sh
alias "juliaimage"="julia --project=~/.juliaenv/juliaImage"
```

</br>

## 패키지 개발을 위한 프로젝트 


아주 간단하고, 한번 만든 후 더이상 업그레이드나 유지보수를 하지 않는 코딩을 하는 경우가 아니라면, 즉 당신은 기본으로 설치되는 표준 라이브러리 이외의 패키지를 사용하며 계속 개선하고 유지보수하며 혹은 github 에 올려 다른 사람들이 당신의 멋진 패키지를 사용하게 하고 싶다면 앞서와는 다른 **환경(environment)** 을 만들어야 한다. 환경과 더불어 중요한 용어가 **의존성(dependency)** 이다. 당신이 패키지를 개발하는데 필요한 julia 자체와 julia 의 다른 패키지, 그리고 각각의 버젼을 합쳐서 의존성이라고 한다. 

새로운 패키지를 개발한다면 github 에 리포지터리를 생성해야 한다. 여기서 github 에 계정과 이후 리포지터리를 만드는 작업은 생략하기로 한다. 보통 리포지터리 이름은 당신이 만들고자 하는 패키지 이름 + ".jl" 로 한다. `jl` 은 julia 언어 스크립트 파일의 확장자이자, 보통 julia 패키지 이름의 끝에 붙기도 한다. 예를 들어 `MyAwesomePackage.jl` 같은 이름을 사용 할 수 있다. 여기서는 `NAJ.jl` 로 하자. 

</br>

### 시작하기 

이제 터미널에서 `NAJ.jl` 를 시작할 디렉토리에 만든다. 예를 들어 `/Users/myacc/Project` 디렉토리에 `NAJ.jl` 디렉토리를 만들고 이 디렉토리에서 패키지를 만들고 싶다면 `/Users/myacc/Project` 로 이동한다. 그리고 julia REPL 을 실행시키고 `]` 키를 통해 pkg 모드에 진입합니다.

```{.txt filename="REPL-In"}
(@v1.10) pkg>
```

이제 패키지를 초기화 합니다. 

```{.txt filename="REPL-In"}
(@v1.10) pkg> generate NAJ.jl
  Generating  project NAJ:
    NAJ.jl/Project.toml
    NAJ.jl/src/NAJ.jl
```

실행을 위한 환경이 아니라 패키지 개발을 위한 환경에서는 `generate` 명령어를 사용한다는 것에 유의하라. `generate` 명령을 사용하면 `src` 서브디렉토리와 패키지 이름에 `.jl` 이 붙은 파일을 추가로 생성한다. `Project.toml` 파일은 프로젝트의 정보와 설정을 담는 파일이고, 패키지 이름과 같은 `NAJ.jl` 파일은 패키지의 julia 코드를 저장하는 핵심 파일이다. `using NAJ` 는 결국 `NAJ.jl` 프로젝트 의 `src/NAJ.jl` 파일을 읽는다는 의미이다. 

julia 에는 현재 작업 디렉토리라는 개념이 있다. julia 인터프리터의 경우 인터프리터를 시작할 때 별도로 지정하지 않았다면 julia 인터프리터를 실행한 디렉토리이다. julia REPL 에서 `pwd()` 함수로 확인 할 수 있으며, `cd()` 함수를 통해 현재 작업 디렉토리를 이동 할 수 있다. `NAJ.jl` 로 이동한다.

```txt
In [1]: cd("NAJ.jl")

In [2]: pwd()
Out[2]: "/Users/myacc/Project/NAJ.jl"
```

이제 터미널로 나갑니다. 이제 `NAJ.jl` 디렉토리와 git 저장소를 동기화한다. 아래에서 `[git repository address]` 에는 실제 github 저장소 주소를 넣는다. 예를 들면 `https://github.com/Julia-KAERI/NAJ.jl.git`.

```sh
git init
git remote add origin [git repository address]
```

현재 저장소는 비어 있으므로 이미 존재하는 파일과 디렉토리를 업로드한다. 브랜치 이름은 `main` 이나 `master` 일 것이다. 터미널에서 `git status` 명령어로 확인한다.

```sh
git add .
git commit -m "first_upload"
git push origin main # main 혹은 master 
```

여기까지 별 문제가 없었다면 준비가 다 되었다. 

</br>

### 활성화

Julia 인터프리터의 pkg 모드에서 `activate .` 명령은 현재 디렉토리의 환경을 활성화 하라는 명령이다. 

```{.txt filename="REPL-In"}
(@v1.10) pkg> activate .
  Activating new project at `~/development/Projects/NAJ.jl`

(NAJ.jl) pkg>
```

프롬프트가 `(NAJ.jl)` 로 바뀌었다. 즉 환경이 변경되었다. `activate` 만 치면 기본 환경, 즉 julia 가 처음 설치되었을때의 환경으로 돌아간다. 실행 후 입력 프롬프트에서 환경을 확인 할 수 있다.

```{.txt filename="REPL-In"}
(NAJ.jl) pkg> activate
  Activating project at `~/.julia/environments/v1.10`
(@v1.10) pkg>
```

현재까지 당신의 `NAJ.jl` 디렉토리는 패키지 생성에서 만든 파일, 디렉토리와 github 에서 사용하는 `.git` 디렉토리를 제외하면 비어있습다.

```{.txt filename="REPL-In"}
In [2]: readdir()
Out[2]: 3-element Vector{String}:
 ".git"
 "Project.toml"
 "src"
```

환경을 활성화 하는 방법은 REPL 에서 `using Pkg` 로 `Pkg` 를 임포트 한후 `activate` 함수를 사용하는 방법도 있다. `activate` 함수의 인자로는 환경이 설치된 경로가 필요하다.

```julia
using Pkg
Pkg.activate("~/development/Projects/NAJ.jl")
```

`Pkg.status()` 함수나 `pkg` 모드의 `status` 명령어로 현재의 환경을 확인 할 수 있다.

```{.txt filename="REPL-In"}
In [4]: Pkg.status()
Project NAJ v0.1.0
Status `~/development/Projects/NAJ.jl/Project.toml` (empty project)
```

</br>

### 패키지 추가

당신이 패키지를 개발하는 데 필요한 외부 패키지를 하나 추가해 보자. 쉽게 삭제 할 수 있으니 걱정하지 않아도 된다. 아직 생각나지 않는다면 `Example` 패키지를 추가해 보자.

```{.txt filename="REPL-In"}
(NAJ) pkg> add Example
   Resolving package versions...
    Updating `~/development/Projects/NAJ.jl/Project.toml`
  [7876af07] + Example v0.5.3
    Updating `~/development/Projects/NAJ.jl/Manifest.toml`
  [7876af07] + Example v0.5.3
Precompiling project...
  1 dependency successfully precompiled in 2 seconds. 1 already precompiled.
```

이제 패키지 폴더에 `Manifest.toml` 파일이 추가되었으며 `Pkg.status()` 함수를 통해 패키지가 추가되었다는 것을 확인 할 수 있다.

```{.txt filename="REPL-In"}
In [8]: readdir()
Out[8]: 3-element Vector{String}:
 ".git"
 "Manifest.toml"
 "Project.toml"

In [9]: Pkg.status()
Status `~/development/Projects/NAJ.jl/Project.toml`
  [7876af07] Example v0.5.3
```

</br>

### `Project.toml` 과 `Manifest.toml`

[`toml`](https://toml.io/ko/v1.0.0) 은 설정을 간편하게 읽고 쓰게 해주는 파일 포멧이며 보통 `.toml` 확장자를 갖는다. 텍스트 형식으로 저장하기 때문에 문서편집기에서 직접 편집 할 수 있다. 두 파일에 대해 간략히 요약하면 다음과 같다.


- `Project.toml` : 프로젝트 파일은 상위 수준에서 프로젝트를 설명한다. 패키지 작성자 및 이름, 패키지 자체의 버전 정보 및 UUID, 의존성 및 호환성이 이 파일에 나열된다. 

- `Manifest.toml` : 환경 내의 패키지 상태에 대한 절대적인 기록이다. 여기에는 프로젝트의 (직접 및 간접) 의존성에 대한 정확한 정보가 포함된다. 보통은 환경의 변경 및 패키지 설치/제거 에 따라 자동적으로 생성되며 사용자가 건드리지 않는다.


`Project.toml` 과 `Manifest.toml` 쌍이 주어지면 정확히 동일한 패키지 환경을 복원하거나 생성 할 수 있으며 이는 재현성에 매우 유용합니다. 자세한 내용은 [`Pkg.instantiate`](https://pkgdocs.julialang.org/v1/api/#Pkg.instantiate)를 참조하라.

이제 `Project.toml` 파일에 패키지 정보를 추가한다. 우선 현재의 파일은 다음과 같을 것이다.

```toml
name = "NAJ"
uuid = "3a8672d3-a8d7-4fb7-80dc-526698d5a642"
authors = ["julia-KAERI <julia.kaeri@gmail.com>"]
version = "0.1.0"

[deps]
Example = "7876af07-990d-54b4-ab0e-23690620f79a"
```

`name` 은 패키지 이름, `authors` 는 저자들 정보, `versions` 는 버젼 정보이다. 버젼 정보는 `.`으로 이어진 세개의 수로 구성되며 보통 주버젼, 부버젼, 패치버젼을 말한다. 정식으로 배포되기전에는 보통 주버젼을 `0` 으로 한다. 현재는 초기 상태이므로 버젼이 "0.1.0" 이다. `uuid` 는 범용 고유 식별자(universally unique identifier) 의 영어 약자로 여기서는 패키지마다 부여되는 고유한 번호라고 생각할 수 있다. 
 

</br>

## 패키지 메인 파일 

여기서는 패키지 이름과 같은 `NAJ.jl" 이며 `src` 디렉토리에 있다. 템플릿으로 주어지는 내용은 다음과 같다.

```julia
module NAJ

greet() = print("Hello World!")

end # module NAJ
```

</br>

이제 여러분이 여기를 채워가면 됩니다.


